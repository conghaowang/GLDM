from dataset import MolerDataset, MolerData
from utils import pprint_pyg_obj
from torch_geometric.loader import DataLoader
from model import BaseModel
from pytorch_lightning import Trainer
import torch

train_dataset = MolerDataset(
    root="/data/ongh0068",
    raw_moler_trace_dataset_parent_folder="/data/ongh0068/l1000/trace_playground",
    output_pyg_trace_dataset_parent_folder="/data/ongh0068/l1000/pyg_output_playground",
    split="train",
)

train_dataloader = DataLoader(
    train_dataset,
    batch_size=256,
    shuffle=False,
    follow_batch=[
        "correct_edge_choices",
        "correct_edge_types",
        "valid_edge_choices",
        "valid_attachment_point_choices",
        "correct_attachment_point_choice",
        "correct_node_type_choices",
        "original_graph_x",
    ],
)

params = {
    "full_graph_encoder": {"input_feature_dim": 32, "atom_or_motif_vocab_size": 139},
    "partial_graph_encoder": {"input_feature_dim": 32},
    "mean_log_var_mlp": {"input_feature_dim": 832, "output_size": 1024},
    "decoder": {
        "node_type_selector": {"input_feature_dim": 1344, "output_size": 140},
        "node_type_loss_weights": torch.tensor(
            [
                10.0000,
                0.1000,
                0.1000,
                0.1000,
                0.7879,
                0.4924,
                0.6060,
                10.0000,
                7.8786,
                10.0000,
                7.8786,
                0.1000,
                0.6565,
                0.6565,
                0.9848,
                0.8754,
                0.8754,
                1.1255,
                0.9848,
                1.3131,
                1.5757,
                1.9696,
                1.5757,
                1.9696,
                2.6262,
                1.9696,
                1.9696,
                7.8786,
                7.8786,
                3.9393,
                2.6262,
                2.6262,
                2.6262,
                2.6262,
                3.9393,
                7.8786,
                7.8786,
                7.8786,
                3.9393,
                7.8786,
                10.0000,
                7.8786,
                3.9393,
                3.9393,
                3.9393,
                3.9393,
                3.9393,
                3.9393,
                3.9393,
                3.9393,
                3.9393,
                3.9393,
                3.9393,
                3.9393,
                7.8786,
                7.8786,
                10.0000,
                10.0000,
                7.8786,
                7.8786,
                10.0000,
                7.8786,
                7.8786,
                10.0000,
                7.8786,
                7.8786,
                10.0000,
                7.8786,
                10.0000,
                7.8786,
                7.8786,
                10.0000,
                7.8786,
                7.8786,
                7.8786,
                10.0000,
                10.0000,
                7.8786,
                7.8786,
                7.8786,
                7.8786,
                7.8786,
                10.0000,
                10.0000,
                10.0000,
                10.0000,
                7.8786,
                10.0000,
                10.0000,
                10.0000,
                7.8786,
                10.0000,
                7.8786,
                10.0000,
                7.8786,
                10.0000,
                10.0000,
                10.0000,
                10.0000,
                10.0000,
                10.0000,
                10.0000,
                10.0000,
                7.8786,
                10.0000,
                7.8786,
                7.8786,
                7.8786,
                7.8786,
                10.0000,
                7.8786,
                10.0000,
                10.0000,
                10.0000,
                7.8786,
                7.8786,
                7.8786,
                7.8786,
                7.8786,
                7.8786,
                7.8786,
                7.8786,
                7.8786,
                7.8786,
                7.8786,
                7.8786,
                7.8786,
                7.8786,
                7.8786,
                7.8786,
                7.8786,
                7.8786,
                7.8786,
                7.8786,
                7.8786,
                7.8786,
                7.8786,
                7.8786,
                7.8786,
                0.1000,
            ]
        ),
        "no_more_edges_repr": (1, 835),
        "edge_candidate_scorer": {"input_feature_dim": 3011, "output_size": 1},
        "edge_type_selector": {"input_feature_dim": 3011, "output_size": 3},
        "attachment_point_selector": {"input_feature_dim": 2176, "output_size": 1},
    },
    "latent_sample_strategy": "per_graph",
    "latent_repr_dim": 512,
    "latent_repr_size": 512,
}

model = BaseModel(params, train_dataset).to("cuda:1")


# datamodule = LightningDataset(dataset)
trainer = Trainer()  # overfit_batches=1)
trainer.fit(model, train_dataloader, train_dataloader)
